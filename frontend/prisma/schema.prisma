generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  firstName String?
  lastName  String?
  balance   Decimal  @default(0.00) @db.Decimal(10, 2)
  avatar    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bets            Bet[]
  transactions    Transaction[]
  betSlipItems    BetSlipItem[]

  @@map("users")
}

model Sport {
  id          String @id @default(cuid())
  name        String @unique
  slug        String @unique
  displayName String
  icon        String?
  isActive    Boolean @default(true)

  leagues League[]

  @@map("sports")
}

model League {
  id          String @id @default(cuid())
  sportId     String
  name        String
  slug        String
  displayName String
  country     String?
  logo        String?
  isActive    Boolean @default(true)

  sport Sport @relation(fields: [sportId], references: [id])
  games Game[]

  @@map("leagues")
}

model Team {
  id          String  @id @default(cuid())
  name        String
  slug        String  @unique
  displayName String
  logo        String?
  city        String?
  country     String?
  isActive    Boolean @default(true)

  homeGames Game[] @relation("HomeTeam")
  awayGames Game[] @relation("AwayTeam")

  @@map("teams")
}

model Game {
  id           String    @id @default(cuid())
  leagueId     String
  homeTeamId   String
  awayTeamId   String
  startTime    DateTime
  status       GameStatus @default(SCHEDULED)
  homeScore    Int?
  awayScore    Int?
  season       String?
  week         Int?
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  league     League @relation(fields: [leagueId], references: [id])
  homeTeam   Team   @relation("HomeTeam", fields: [homeTeamId], references: [id])
  awayTeam   Team   @relation("AwayTeam", fields: [awayTeamId], references: [id])

  odds Odds[]
  bets Bet[]

  @@map("games")
}

model Odds {
  id        String   @id @default(cuid())
  gameId    String
  bookmaker String   @default("default")
  betType   BetType
  line      Decimal? @db.Decimal(5, 2)
  odds      Decimal  @db.Decimal(6, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  game Game @relation(fields: [gameId], references: [id])
  bets Bet[]

  @@map("odds")
}

model Bet {
  id         String    @id @default(cuid())
  userId     String
  gameId     String
  oddsId     String
  type       BetType
  amount     Decimal   @db.Decimal(10, 2)
  odds       Decimal   @db.Decimal(6, 2)
  potential  Decimal   @db.Decimal(10, 2)
  status     BetStatus @default(PENDING)
  result     BetResult?
  payout     Decimal?  @db.Decimal(10, 2)
  placedAt   DateTime  @default(now())
  settledAt  DateTime?

  user User @relation(fields: [userId], references: [id])
  game Game @relation(fields: [gameId], references: [id])
  odds Odds @relation(fields: [oddsId], references: [id])

  parlayBets ParlayBet[]

  @@map("bets")
}

model ParlayBet {
  id       String @id @default(cuid())
  parlayId String
  betId    String

  parlay Parlay @relation(fields: [parlayId], references: [id])
  bet    Bet    @relation(fields: [betId], references: [id])

  @@unique([parlayId, betId])
  @@map("parlay_bets")
}

model Parlay {
  id        String    @id @default(cuid())
  userId    String
  amount    Decimal   @db.Decimal(10, 2)
  totalOdds Decimal   @db.Decimal(8, 2)
  potential Decimal   @db.Decimal(10, 2)
  status    BetStatus @default(PENDING)
  result    BetResult?
  payout    Decimal?  @db.Decimal(10, 2)
  placedAt  DateTime  @default(now())
  settledAt DateTime?

  user User @relation(fields: [userId], references: [id])

  parlayBets ParlayBet[]

  @@map("parlays")
}

model BetSlipItem {
  id       String  @id @default(cuid())
  userId   String
  gameId   String
  oddsId   String
  betType  BetType
  odds     Decimal @db.Decimal(6, 2)
  line     Decimal? @db.Decimal(5, 2)
  addedAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("bet_slip_items")
}

model Transaction {
  id          String            @id @default(cuid())
  userId      String
  type        TransactionType
  amount      Decimal           @db.Decimal(10, 2)
  balance     Decimal           @db.Decimal(10, 2)
  description String?
  status      TransactionStatus @default(COMPLETED)
  createdAt   DateTime          @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("transactions")
}

enum GameStatus {
  SCHEDULED
  LIVE
  COMPLETED
  POSTPONED
  CANCELLED
}

enum BetType {
  MONEYLINE
  SPREAD
  TOTAL_OVER
  TOTAL_UNDER
}

enum BetStatus {
  PENDING
  WON
  LOST
  CANCELLED
  PUSHED
}

enum BetResult {
  WIN
  LOSS
  PUSH
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  BET_PLACED
  BET_WON
  BET_REFUND
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}